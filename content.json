{"meta":{"title":"ssy的Blog","subtitle":"Hello,world.","description":"网站描述？","author":"ssy","url":"http://ssy-0.github.io","root":"/"},"pages":[{"title":"","date":"2021-12-19T06:53:46.878Z","updated":"2021-12-19T06:53:46.878Z","comments":true,"path":"404.html","permalink":"http://ssy-0.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2021-12-19T14:07:33.041Z","updated":"2021-12-19T14:07:33.041Z","comments":true,"path":"categories/index.html","permalink":"http://ssy-0.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-19T13:56:11.693Z","updated":"2021-12-19T13:56:11.693Z","comments":true,"path":"about/index.html","permalink":"http://ssy-0.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2021-12-19T14:08:26.139Z","updated":"2021-12-19T14:08:26.139Z","comments":true,"path":"friends/index.html","permalink":"http://ssy-0.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2021-12-19T14:08:35.722Z","updated":"2021-12-19T14:08:35.722Z","comments":true,"path":"tags/index.html","permalink":"http://ssy-0.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mybatis结果映射","slug":"Mybatis结果映射","date":"2021-12-22T05:10:00.000Z","updated":"2021-12-22T12:19:40.409Z","comments":true,"path":"2021/12/22/Mybatis结果映射/","link":"","permalink":"http://ssy-0.github.io/2021/12/22/Mybatis%E7%BB%93%E6%9E%9C%E6%98%A0%E5%B0%84/","excerpt":"","text":"resultMap结果映射正常情况下MyBatis可以自动映射查询出来的结果，不过如果实体类字段名和查询字段名不一致的话或者遇到了较为复杂的场景的话 那么结果集不能正常映射 此问题可以通过SQL语句起别名方法解决 不过MyBatis中也提供了手动映射方案 建议使用此方法 resultMap简单实用场景情况下使用方法如下 12345678910111213141516&lt;select id=&quot;selectUsers&quot; resultMap=&quot;userResultMap&quot;&gt; select user_id, user_name as &quot;userName&quot;, hashed_password from some_table where id = #&#123;id&#125;&lt;/select&gt;&lt;!-- 手动映射的话id值与resultMap值需要相互对应 --&gt;&lt;!-- type为需要映射的实体类 --&gt;&lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot;&gt; &lt;!-- property为实体类中对应的字段名 column为SQL语句中相对应的字段 --&gt; &lt;id property=&quot;id&quot; column=&quot;user_id&quot; /&gt; &lt;result property=&quot;password&quot; column=&quot;hashed_password&quot;/&gt;&lt;/resultMap&gt; 当然正常项目中如果都是这么简单的就好了 它还有更为复杂的场景 参考MyBatis官网 Mybatis官方文档-结果映射-高级结果映射https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps","categories":[{"name":"Java","slug":"Java","permalink":"http://ssy-0.github.io/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://ssy-0.github.io/tags/Mybatis/"}]},{"title":"Mybatis配置优化","slug":"Mybatis配置优化","date":"2021-12-20T13:44:00.000Z","updated":"2021-12-22T05:44:58.563Z","comments":true,"path":"2021/12/20/Mybatis配置优化/","link":"","permalink":"http://ssy-0.github.io/2021/12/20/Mybatis%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/","excerpt":"","text":"别名优化XML别名配置文件写在项目Mybatis配置文件内示例如下 1234567&lt;typeAliases&gt; &lt;!-- 实体类较少的话可直接为实体类起别名 --&gt; &lt;typeAlias type=&quot;com.ssy.pojo.User&quot; alias=&quot;User&quot; /&gt; &lt;!-- 实体类较多的话可建议为包名优化 --&gt; &lt;package name=&quot;com.ssy.pojo&quot;/&gt;&lt;/typeAliases&gt; 包名别名优化 的话SQL映射文件建议是使用实体类首字母小写 示例如下 12345678910&lt;!-- 优化前 --&gt;&lt;select id=&quot;getUserList&quot; resultType=&quot;com.ssy.pojo.User&quot;&gt; select * from test.user&lt;/select&gt;&lt;!-- 优化后 --&gt;&lt;select id=&quot;getUserList&quot; resultType=&quot;user&quot;&gt; select * from test.user&lt;/select&gt; 实体类起别名也可以用注解形式进行起别名 123import org.apache.ibatis.type.Alias;@Alias(&quot;别名&quot;)public class User &#123;&#125; 设置设置内容太多查看Mybatis官方文档 Mybatis官方文档-设置https://mybatis.org/mybatis-3/zh/configuration.html#settings 映射器（mappres）映射器注册 方法一：通过使用相对于类路径的资源引用 123&lt;mappers&gt; &lt;mapper resource=&quot;com/ssy/dao/UserMapper.xml&quot;/&gt;&lt;/mappers&gt; 方法二：使用完全限定资源定位符 123&lt;mappers&gt; &lt;mapper url=&quot;file:///var/mappers/UserMapper.xml&quot;/&gt;&lt;/mappers&gt; 强烈不建议使用 方法三：使用映射器接口实现类的完全限定类名 123&lt;mappers&gt; &lt;mapper class=&quot;com.ssy.dao.UserMapper&quot;/&gt;&lt;/mappers&gt; 注意使用这种方法Mapper映射文件需要和接口处于同一包下 且名称需一致 方法四：将包内的映射器接口实现全部注册为映射器 123&lt;mappers&gt; &lt;package name=&quot;com.ssy.dao&quot;/&gt;&lt;/mappers&gt; 注意使用这种方法Mapper映射文件需要和接口处于同一包下 且名称需一致","categories":[{"name":"Java","slug":"Java","permalink":"http://ssy-0.github.io/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://ssy-0.github.io/tags/Mybatis/"}]},{"title":"Mybatis增删改查","slug":"Mybatis增删改查","date":"2021-12-19T08:01:17.000Z","updated":"2021-12-22T05:10:27.520Z","comments":true,"path":"2021/12/19/Mybatis增删改查/","link":"","permalink":"http://ssy-0.github.io/2021/12/19/Mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"","text":"Mybatis中每种功能的Sql语句有对应的XML标签 不能进行混用 1234567891011121314151617181920212223&lt;mapper namespace=&quot;com.ssy.dao.UserDao&quot;&gt; &lt;select id=&quot;getUserList&quot; resultType=&quot;com.ssy.pojo.User&quot;&gt; select * from test.user &lt;/select&gt; &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.ssy.pojo.User&quot;&gt; insert into test.user(id, name, pwd) value (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;); &lt;/insert&gt; &lt;update id=&quot;updateUser&quot; parameterType=&quot;com.ssy.pojo.User&quot;&gt; update test.user set name = #&#123;name&#125;, pwd = #&#123;pwd&#125; where id = #&#123;id&#125;; &lt;/update&gt; &lt;delete id=&quot;deleteUser&quot;&gt; delete from test.user where id = #&#123;id&#125;; &lt;/delete&gt;&lt;/mapper&gt;","categories":[{"name":"Java","slug":"Java","permalink":"http://ssy-0.github.io/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://ssy-0.github.io/tags/Mybatis/"}]},{"title":"mybatis 入门","slug":"Mybatis入门","date":"2021-12-17T14:07:00.000Z","updated":"2021-12-20T15:02:14.754Z","comments":true,"path":"2021/12/17/Mybatis入门/","link":"","permalink":"http://ssy-0.github.io/2021/12/17/Mybatis%E5%85%A5%E9%97%A8/","excerpt":"","text":"1.安装如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中： 12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;x.x.x&lt;/version&gt;&lt;/dependency&gt; 2.mybatis基础配置在项目资源目录下新建一个配置文件 一般名为mybatis-config.xml 其中内容模板为 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!-- 引入外部配置文件 此标签必须位于最前方 可以自闭和 直接读取 --&gt; &lt;properties resource=&quot;config.properties&quot;&gt; &lt;!-- 也可以再次进行追加 外部配置文件优先级更高 --&gt; &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt; &lt;/properties&gt; &lt;!-- 环境配置 --&gt; &lt;environments default=&quot;development&quot;&gt; &lt;!-- 环境变量 --&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 事务管理器 --&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;!-- 数据源 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;!-- 数据库链接驱动 --&gt; &lt;!-- driver为config.properties中的内容 --&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver或$&#123;driver&#125;&quot;/&gt; &lt;!-- 数据库链接地址 --&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?useSSL=false&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt; &lt;!-- 数据库链接用户名 --&gt; &lt;property name=&quot;username&quot; value=&quot;test或$&#123;username&#125;&quot;/&gt; &lt;!-- 数据库链接密码 --&gt; &lt;property name=&quot;password&quot; value=&quot;123456或$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- mapper映射对象 --&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/ssy/dao/UserMapper.xml&quot;/&gt; &lt;/mappers&gt;&lt;/configuration&gt; properties配置文件内容示例如下 1234driver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/test?useSSL=false&amp;amp;userUnicode=true&amp;amp;characterEncoding=UTF-8uname=testpwd=123456 还需在项目pom.xml中加入一下代码，可以将资源文件同步到生成的项目中，运行时不会出现找不到资源的问题 1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 3.构建 SqlSessionFactory每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。构建 SqlSessionFactory有两种方式，一种从XML种构建，一种直接通过Java代码构建。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。 1.从XML中构建 SqlSessionFactory12345String resource = &quot;mybatis-config.xml路径&quot;;// 正常因该可直接填写&quot;配置文件名.xml&quot;即可InputStream inputStream = Resources.getResourceAsStream(resource);// 使用数据流需使用异常捕获SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); xml配置内容如上mybatis基础配置 2.不适用XML构建SqlSessionFactory123456DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();TransactionFactory transactionFactory = new JdbcTransactionFactory();Environment environment = new Environment(&quot;development&quot;, transactionFactory, dataSource);Configuration configuration = new Configuration(environment);configuration.addMapper(BlogMapper.class);SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration); 这种麻烦暂时不会用 4.从SqlSessionFactory中获取SqlSessionSqlSession 提供了在数据库执行 SQL 命令所需的所有方法。可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。 12345SqlSession session = sqlSessionFactory.openSession();BlogMapper mapper = session.getMapper(BlogMapper.class);// 获取Mapper相应的SQL映射Blog blog = mapper.selectBlog(101);// 执行以映射SQL语句 如SQL语句进行过增删改操作后需提交 1session.commit(); 使用完毕SqlSession后需谨记关闭SqlSession 1session.close(); 5.映射SQL语句sql语句可以通过 XML或者注解进行定义 这里先进行XML定义 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- namespace处填写Mapper类的完全限定报名 --&gt;&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt; &lt;!-- id处填写Mapper对应的函数名 --&gt; &lt;!-- parameterType填写参数类型 int类型可忽略不写 --&gt; &lt;!-- resultType返回值处填写返回的值类型 如果为自定义类可直接填写类名或者完全限定名 推荐完全限定名 这样不易出问题 --&gt; &lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt; select * from Blog where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 6.生命周期和作用域作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 SqlSessionFactoryBuilder 一旦创建了 SqlSessionFactory，就不再需要它了。 可以直接声明为局部变量 用完就可以销毁 SqlSessionFactory 可以理解为数据库连接池 创建后应当一直存在 知道程序运行结束 防止浪费资源 SqlSessionFactory 的最佳作用域是应用作用域 最简单的就是使用单例模式或者静态单例模式 SqlSession 相当于来接连接池的请求 它不是线程安全的 不能进行共享 用完之后需及时关闭 不然的话会出现资源占用情况 作用域最好仅处于一个方法内","categories":[{"name":"Java","slug":"Java","permalink":"http://ssy-0.github.io/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://ssy-0.github.io/tags/Mybatis/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-12-17T14:02:49.369Z","updated":"2021-12-17T14:02:49.370Z","comments":true,"path":"2021/12/17/hello-world/","link":"","permalink":"http://ssy-0.github.io/2021/12/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://ssy-0.github.io/categories/Java/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://ssy-0.github.io/tags/Mybatis/"}]}